% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data.R
\docType{data}
\name{turtle_nest_encounters_hatched}
\alias{turtle_nest_encounters_hatched}
\title{TurtleNestEncounter (hatched nests) WAStD API response}
\format{An object of class \code{wastd_api_response} of length 3.}
\source{
https://strandings.dpaw.wa.gov.au/api/1/turtle-nest-encounters/?taxon=Cheloniidae&limit=10&format=json&nest_type__exact=hatched-nest
}
\usage{
turtle_nest_encounters_hatched
}
\description{
This API response is parsed into wastr's data "nests".
}
\examples{
# Generate turtle_nest_encounters_hatched
\dontrun{
q = list(taxon = "Cheloniidae", limit = 10, format = "json", nest_type = "hatched-nest")
turtle_nest_encounters_hatched <- wastdr::get_wastd("turtle-nest-encounters", query = q)
anonymize <- function(dict){
    anon = list(
             name = "Test Name",
             username = "test_name",
             email = "test@email.com",
             phone = "")
    dict$properties <- dict$properties \%>\%
        purrr::update_list(observer = anon, reporter = anon)
    dict
}
turtle_nest_encounters_hatched$content <- turtle_nest_encounters_hatched$content \%>\% map(anonymize)
listviewer::jsonedit(turtle_nest_encounters_hatched$content)
nests <- parse_turtle_nest_encounters(turtle_nest_encounters_hatched)
DT::datatable(nests)
devtools::use_data(turtle_nest_encounters_hatched, overwrite = TRUE)
devtools::use_data(nests, overwrite = TRUE)
}
# Prove that turtle_nest_encounters_hatched parses to nests
library(dplyr)
data(turtle_nest_encounters_hatched)
data(nests)
fresh_nests <- parse_turtle_nest_encounters(turtle_nest_encounters_hatched)
testthat::expect_equal(nrow(fresh_nests), nrow(nests))
# Compare pickled and fresh nests excluding list columns (like obs)
testthat::expect_equal(fresh_nests \%>\% dplyr::select(-obs),
                       nests \%>\% dplyr::select(-obs))
}
\keyword{datasets}
