% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_wastd.R
\name{get_wastd}
\alias{get_wastd}
\title{Return GeoJSON features from a WAStD API endpoint as data.table or list}
\usage{
get_wastd(serializer, query = list(taxon = "Cheloniidae", limit = 10000,
  format = "json"), api_url = get_wastdr_api_url(),
  api_token = get_wastdr_api_token(), api_un = get_wastdr_api_un(),
  api_pw = get_wastdr_api_pw(), simplify = FALSE)
}
\arguments{
\item{serializer}{(character) WAStD API serializer name (required).
Possible values as per
\code{https://strandings.dpaw.wa.gov.au/api/1/?format=corejson} are:
\itemize{
\item encounters (all encounters, but only core fields)
\item animal-encounters (strandings, tagging)
\item turtle-nest-encounters (tracks and nests)
\item logger-encounters (temp and other loggers)
\item areas (polygons of known areas)
\item media-attachments (photos, data sheets etc)
\item nesttag-observations (sightings of nest tags)
\item tag-observations (tag observations during encounters)
}}

\item{query}{(list) API query parameters for format, limit, filtering
(default: list(taxon='Cheloniidae', limit=10000, format='json'))}

\item{api_url}{(character) The WAStD API URL,
default \code{\link{get_wastdr_api_url}}, see \code{\link{wastdr_setup}}}

\item{api_token}{(character) The WAStD API token,
default \code{\link{get_wastdr_api_token}}, see \code{\link{wastdr_setup}}}

\item{simplify}{(Boolean) Whether to flatten nested data frames into a single
data frame with repeating unnamed groups as lists (simplify = TRUE), or as
list of lists (default: FALSE)}
}
\value{
An S3 object of class 'wastd_api_response' containing:

  content: The retrieved GeoJSON features as data.table or list

  serializer: The called serializer, e.g. 'animal-encounters'

  response: The API HTTP response with all metadata
}
\description{
Call the WAStD API serializer's list view with given GET parameters,
  parse the response as text into a GeoJSON FeatureCollection.
  Parse the FeatureCollection using jsonlite::fromJSON and return its features
  as nested data.frame (simplify=TRUE) or as list of lists (simplify=FALSE).
  TODO: use pagination, see
  \url{https://cran.r-project.org/web/packages/jsonlite/vignettes/json-paging.html}
}
\examples{
\dontrun{
track_records <- get_wastd('turtle-nest-encounters')

tag_records <- get_wastd('animal-encounters')

nest_json <- get_wastd('turtle-nest-encounters',
                       query=list(
                         nest_type='hatched-nest',
                         limit=10000,
                         format='json'))
}
}
